package otus.gpb.homework.activities

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.BitmapFactory
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.widget.ImageView
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.content.res.AppCompatResources
import androidx.appcompat.widget.Toolbar
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

class EditProfileActivity : AppCompatActivity() {

    private lateinit var imageView: ImageView

    private val requestCameraPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        when {
            isGranted -> {
                openCameraToMakePhotoForProfileImage()
            }

            !ActivityCompat.shouldShowRequestPermissionRationale(
                this,
                Manifest.permission.CAMERA,
            ) -> {
                showOpenAppSettingDialog()
            }

            else -> {
                showRequiredCamaraPermissionDialog()
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_edit_profile)
        imageView = findViewById(R.id.imageview_photo)

        findViewById<Toolbar>(R.id.toolbar).apply {
            inflateMenu(R.menu.menu)
            setOnMenuItemClickListener {
                when (it.itemId) {
                    R.id.send_item -> {
                        openSenderApp()
                        true
                    }
                    else -> false
                }
            }
        }

        imageView.setOnClickListener {
            showProfileImageChangerDialog()
        }
    }

    private fun showProfileImageChangerDialog() {
        AlertDialog.Builder(this)
            .setTitle("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
            .setMessage("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            .setPositiveButton("–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ") { _, _ ->
                makePhotoForProfileImage()
            }
            .setNegativeButton("–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ") { _, _ ->
                choosePhotoForProfileImage()
            }
            .create()
            .show()
    }

    private fun makePhotoForProfileImage() {
        requestCameraPermission()
    }

    private fun requestCameraPermission() {
        requestCameraPermissionLauncher.launch(
            Manifest.permission.CAMERA,
        )
    }

    private fun showRequiredCamaraPermissionDialog() {
        AlertDialog.Builder(this)
            .setTitle("–¢—ã —á—ë –ø—ë—Å!")
            .setMessage("–î–∞–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ \uD83D\uDC7E")
            .setPositiveButton("–î–∞—Ç—å –¥–æ—Å—Ç—É–ø") { _, _ ->
                requestCameraPermission()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞") { dialog, _ ->
                dialog.dismiss()
            }
            .create()
            .show()
    }

    private fun showOpenAppSettingDialog() {
        AlertDialog.Builder(this)
            .setTitle("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
            .setMessage("–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –≤–∫–ª—é—á–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–∞–º–µ—Ä—ã")
            .setPositiveButton("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") { _, _ ->
                openAppSettings()
            }
            .create()
            .show()
    }

    private fun openAppSettings() {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
            data = Uri.fromParts(
                "package",
                packageName,
                null,
            )
        }
        startActivity(intent)
    }

    private fun openCameraToMakePhotoForProfileImage() {
        // –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –º—ã –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–µ–π–∫–∏ üò∫
        AppCompatResources.getDrawable(this, R.drawable.cat)?.let {
            imageView.setImageDrawable(it)
        }
    }

    private fun choosePhotoForProfileImage() {

    }

    /**
     * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–∑ –º–µ–¥–∏–∞—Ç–µ–∫–∏ –≤ ImageView
     */
    private fun populateImage(uri: Uri) {
        val bitmap = BitmapFactory.decodeStream(contentResolver.openInputStream(uri))
        imageView.setImageBitmap(bitmap)
    }

    private fun openSenderApp() {
        TODO("–í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—è–≤–Ω—ã–π Intent —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º. –í –∫–∞—á–µ—Å—Ç–≤–µ extras –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É")
    }
}